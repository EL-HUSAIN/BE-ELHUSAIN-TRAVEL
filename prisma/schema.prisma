generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  PERSONAL
  ORGANIZATION
}

enum PostType {
  BLOG
  CATALOG
  NEWS
  INFORMATION
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

/// Peran admin
enum AdminRole {
  SUPER
  NORMAL
}

model User {
  id           Int             @id @default(autoincrement())
  email        String          @unique
  passwordHash String
  accountType  AccountType
  createdAt    DateTime        @default(now())
  profile      Profile?
  resets       PasswordReset[]
}

model Profile {
  userId           Int      @id
  firstName        String
  lastName         String
  phoneNumber      String?
  countryCode      String   @db.Char(2)
  nationality      String   @db.Char(2)
  organizationName String?
  user             User     @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id         String   @id @default(uuid())
  userId     Int
  expiresAt  DateTime
  user       User     @relation(fields: [userId], references: [id])
}

model Admin {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  passwordHash String
  role         AdminRole  @default(NORMAL)
  createdAt    DateTime   @default(now())
  posts        Post[]     @relation("AdminPosts")
}

model Post {
  id           Int         @id @default(autoincrement())
  adminId      Int
  type         PostType
  title        String
  slug         String      @unique
  body         String
  status       PostStatus  @default(DRAFT)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isDeleted    Boolean     @default(false)
  deletedAt    DateTime?   
  publishedAt  DateTime?   
  imageUrls    String[]    @default([])
  author       Admin       @relation("AdminPosts", fields: [adminId], references: [id])
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  slug        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  packages    TourPackage[]

  @@map("categories")
}

model TourPackage {
  id          Int         @id @default(autoincrement())
  title      String
  slug       String      @unique
  shortDescription String
  fullDescription  String
  price      Decimal? @db.Decimal(12, 2)
  duration   String
  mainImageUrl String
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  categoryId Int
  category   Category   @relation(fields: [categoryId], references: [id])

  images     TourImage[]
  features         String[] @default([])


  @@index([categoryId])
  @@map("TourPackages")
}

model TourImage {
  id          Int         @id @default(autoincrement())
  imageUrl    String
  displayOrder Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  packageId   Int
  package     TourPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId])
  @@map("TourImages")
}